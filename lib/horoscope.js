const texts = require('./texts.js');

class HoroscopeGenerator {
  static SIGNS = {
    aries: { 
      emoji: "‚ôàÔ∏è", element: "fire", 
      planet: "mars", luckyNumbers: [9, 18], 
      stones: ["diamond", "ruby"],
      traits: ["energetic", "courageous", "impulsive"]
    },
    taurus: { 
      emoji: "‚ôâÔ∏è", element: "earth", 
      planet: "venus", luckyNumbers: [6, 15], 
      stones: ["emerald", "sapphire"],
      traits: ["stable", "patient", "stubborn"]
    },
    // ... –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ ...
  };

  static MOODS = {
    ru: ["–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ", "–ó–∞–¥—É–º—á–∏–≤–æ–µ", "–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ", "–°–ø–æ–∫–æ–π–Ω–æ–µ", "–û—Å—Ç–æ—Ä–æ–∂–Ω–æ–µ", "–†–∞–¥–æ—Å—Ç–Ω–æ–µ"],
    en: ["Optimistic", "Thoughtful", "Energetic", "Calm", "Cautious", "Joyful"]
  };

  static COLORS = {
    ru: ["–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–ó–æ–ª–æ—Ç–æ–π", "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π", "–ö—Ä–∞—Å–Ω—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π", "–†–æ–∑–æ–≤—ã–π"],
    en: ["Blue", "Green", "Gold", "Silver", "Red", "Purple", "Pink"]
  };

  static COMPATIBILITY = {
    aries: { perfect: ["leo", "sagittarius"], good: ["gemini", "aquarius"] },
    taurus: { perfect: ["virgo", "capricorn"], good: ["cancer", "pisces"] },
    // ... –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ ...
  };

  static COOKIE_FORTUNES = {
    ru: [
      "–í–∞—Å –∂–¥–µ—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —É–¥–∞—á–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏",
      "–ü—Ä–∏—Å–ª—É—à–∞–π—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É –≥–æ–ª–æ—Å—É - –æ–Ω –∑–Ω–∞–µ—Ç –æ—Ç–≤–µ—Ç",
      "–°–∫–æ—Ä–æ –≤–∞—Å –∂–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞, –∫–æ—Ç–æ—Ä–∞—è –∏–∑–º–µ–Ω–∏—Ç –º–Ω–æ–≥–æ–µ",
      "–í–∞—à–µ —É–ø–æ—Ä—Å—Ç–≤–æ —Å–∫–æ—Ä–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –¥–æ–ª–≥–æ–∂–¥–∞–Ω–Ω—ã–µ –ø–ª–æ–¥—ã",
      "–û—Ç–∫—Ä–æ–π—Ç–µ—Å—å –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º - –æ–Ω–∏ –≤–µ–¥—É—Ç –∫ —É—Å–ø–µ—Ö—É",
      "–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–º–µ–ª–æ - –≤—Å–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –ø—Ä–µ–æ–¥–æ–ª–∏–º—ã",
      "–í–∞—à–∞ –¥–æ–±—Ä–æ—Ç–∞ –≤–µ—Ä–Ω–µ—Ç—Å—è –∫ –≤–∞–º –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ —É–º–Ω–æ–∂–µ–Ω–Ω–æ–π",
      "–ù–µ –±–æ–π—Ç–µ—Å—å –ø–µ—Ä–µ–º–µ–Ω - –æ–Ω–∏ –≤–µ–¥—É—Ç –∫ –ª—É—á—à–µ–º—É"
    ],
    en: [
      "Unexpected luck awaits you in the coming days",
      "Listen to your inner voice - it knows the answer",
      "A pleasant meeting is coming soon that will change many things",
      "Your perseverance will soon bear long-awaited fruits",
      "Open yourself to new opportunities - they lead to success",
      "Time to act boldly - all obstacles can be overcome",
      "Your kindness will return to you multiplied",
      "Don't be afraid of change - it leads to better"
    ]
  };

  static MAGIC_BALL_ANSWERS = {
    ru: {
      positive: ["–ë–µ–∑—É—Å–ª–æ–≤–Ω–æ!", "–î–∞.", "–í–µ—Å—å–º–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ.", "–ú–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω—ã."],
      negative: ["–ù–µ —Å—Ç–æ–∏—Ç.", "–õ—É—á—à–µ –Ω–µ –Ω–∞–¥–æ.", "–°–µ–π—á–∞—Å –Ω–µ –≤—Ä–µ–º—è.", "–ù–µ —Å–æ–≤–µ—Ç—É—é."],
      neutral: ["–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.", "–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ.", "–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ —Å–Ω–æ–≤–∞."]
    },
    en: {
      positive: ["Certainly!", "Yes.", "Most likely.", "You can be sure."],
      negative: ["Not worth it.", "Better not.", "Not now.", "I wouldn't advise."],
      neutral: ["Ask later.", "It's not clear yet.", "Concentrate and ask again."]
    }
  };

  static getSignName(signKey, lang = 'ru') {
    const signNames = {
      aries: { ru: "–û–≤–µ–Ω", en: "Aries" },
      taurus: { ru: "–¢–µ–ª–µ—Ü", en: "Taurus" },
      // ... –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ ...
    };
    return signNames[signKey]?.[lang] || signNames[signKey]?.ru || "–û–≤–µ–Ω";
  }

  static getZodiacSign(birthDate) {
    const month = birthDate.getMonth() + 1;
    const day = birthDate.getDate();

    if ((month === 3 && day >= 21) || (month === 4 && day <= 19)) return "aries";
    if ((month === 4 && day >= 20) || (month === 5 && day <= 20)) return "taurus";
    // ... –¥—Ä—É–≥–∏–µ –∑–Ω–∞–∫–∏ ...
    
    return "aries";
  }

  static async generate(userId, userData) {
    const lang = userData.lang || 'ru';
    const sign = userData.sign || 'aries';
    const signInfo = this.SIGNS[sign];
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–Ω—è –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const today = new Date();
    const seed = userId + today.toISOString().split('T')[0];
    const rng = this.createRNG(seed);
    
    const mood = rng.pick(this.MOODS[lang]);
    const color = rng.pick(this.COLORS[lang]);
    const luckyNumber = rng.pick(signInfo.luckyNumbers);
    const stone = this.getStoneName(rng.pick(signInfo.stones), lang);
    const planet = this.getPlanetName(signInfo.planet, lang);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å–ø–µ–∫—Ç–æ–≤
    const aspects = {
      love: { score: rng.int(1, 10), description: this.generateLoveDescription(sign, lang, rng) },
      career: { score: rng.int(1, 10), description: this.generateCareerDescription(sign, lang, rng) },
      finance: { score: rng.int(1, 10), description: this.generateFinanceDescription(sign, lang, rng) },
      health: { score: rng.int(1, 10), description: this.generateHealthDescription(sign, lang, rng) }
    };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ—Å–∫–æ–ø–∞
    return `
${signInfo.emoji} <b>${texts[lang].horoscope_title}</b>

üîÆ ${texts[lang].horoscope_sign.replace('{sign}', this.getSignName(sign, lang)).replace('{element}', texts[lang]['element_' + signInfo.element])}
üìÖ ${texts[lang].horoscope_date.replace('{date}', today.toLocaleDateString(lang))}
üåà ${texts[lang].horoscope_mood.replace('{mood}', mood)}
üé® ${texts[lang].horoscope_lucky_color.replace('{color}', color)}
üî¢ ${texts[lang].horoscope_lucky_number.replace('{number}', luckyNumber)}
üíé ${texts[lang].horoscope_lucky_stone.replace('{stone}', stone)}
ü™ê ${texts[lang].horoscope_ruling_planet.replace('{planet}', planet)}

<b>üíñ ${texts[lang].horoscope_love}:</b> ${aspects.love.score}/10
<i>${aspects.love.description}</i>

<b>üíº ${texts[lang].horoscope_career}:</b> ${aspects.career.score}/10
<i>${aspects.career.description}</i>

<b>üí∞ ${texts[lang].horoscope_finance}:</b> ${aspects.finance.score}/10
<i>${aspects.finance.description}</i>

<b>üè• ${texts[lang].horoscope_health}:</b> ${aspects.health.score}/10
<i>${aspects.health.description}</i>

üí° <b>${texts[lang].horoscope_tip}:</b> ${this.generateDailyTip(sign, lang, rng)}

‚ú® ${texts[lang].horoscope_closing_message} 
    `;
  }

  static createRNG(seed) {
    // ... —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ seed ...
  }

  static getCompatibility(sign1, sign2) {
    const compatibilityLevels = ['perfect', 'good'];
    let compatibility = 'average';
    
    for (const level of compatibilityLevels) {
      if (this.COMPATIBILITY[sign1][level]?.includes(sign2) ||
          this.COMPATIBILITY[sign2][level]?.includes(sign1)) {
        compatibility = level;
        break;
      }
    }
    
    return {
      level: compatibility,
      text: texts.ru[`compatibility_${compatibility}`],
      description: texts.ru[`compatibility_desc_${compatibility}`]
    };
  }

  static getCookieFortune(lang = 'ru') {
    return this.COOKIE_FORTUNES[lang][
      Math.floor(Math.random() * this.COOKIE_FORTUNES[lang].length)
    ];
  }

  static getMagicBallAnswer(lang = 'ru') {
    const answers = [
      ...this.MAGIC_BALL_ANSWERS[lang].positive,
      ...this.MAGIC_BALL_ANSWERS[lang].negative,
      ...this.MAGIC_BALL_ANSWERS[lang].neutral
    ];
    return answers[Math.floor(Math.random() * answers.length)];
  }

  // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤
  static generateLoveDescription(sign, lang, rng) {
    const descriptions = texts[lang].love_descriptions;
    return rng.pick(descriptions);
  }
  
  // ... –¥—Ä—É–≥–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –æ–ø–∏—Å–∞–Ω–∏–π ...
}
