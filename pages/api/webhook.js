// pages/api/webhook.js
import { Telegraf, Markup } from 'telegraf';
import { MongoClient } from 'mongodb';
import Keyboard from '../../lib/Keyboard.js'; // –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏
import HoroscopeGenerator from '../../lib/horoscope.js'; // –ò–º–ø–æ—Ä—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
import { sendMessage, showAds } from '../../lib/telegram.js'; // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π Telegram
import { DateTime } from 'luxon';

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const MONGODB_URI = process.env.MONGO_URI;
const DB_NAME = process.env.MONGO_DB_NAME || 'AstroBotDB';
const COLLECTION_NAME = process.env.MONGO_COLLECTION_NAME || 'users';
const TON_WALLET_ADDRESS = process.env.TON_WALLET_ADDRESS;

if (!BOT_TOKEN) {
  console.error('BOT_TOKEN environment variable is not set!');
  throw new Error('BOT_TOKEN is not set.');
}

const bot = new Telegraf(BOT_TOKEN);

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ë–î –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
let cachedClient = null;
let cachedDb = null;

async function connectToDatabase() {
  if (cachedClient && cachedDb) {
    return { client: cachedClient, db: cachedDb };
  }

  if (!MONGODB_URI) {
    throw new Error('Please define the MONGO_URI environment variable inside .env.local');
  }

  const client = await MongoClient.connect(MONGODB_URI);
  const db = client.db(DB_NAME);

  cachedClient = client;
  cachedDb = db;
  console.log("MongoDB connected and collection obtained successfully!");
  return { client, db };
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ get_user –≤ astro.py)
async function getUser(userId, languageCode = 'en') {
    const { db } = await connectToDatabase();
    const usersCollection = db.collection(COLLECTION_NAME);
    let user = await usersCollection.findOne({ _id: userId });
    if (!user) {
        user = {
            _id: userId,
            sign: "aries", // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∑–Ω–∞–∫
            birth_date: null, // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
            last_horoscope_date: null,
            daily_notifications_enabled: false,
            language: languageCode || 'en', // –Ø–∑—ã–∫
            state: null // –î–ª—è FSM
        };
        await usersCollection.insertOne(user);
    }
    return user;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function updateUser(userId, data) {
    const { db } = await connectToDatabase();
    const usersCollection = db.collection(COLLECTION_NAME);
    await usersCollection.updateOne({ _id: userId }, { $set: data });
}

// --- –¢–µ–∫—Å—Ç—ã –¥–ª—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ ---
const TEXTS = {
    "ru": {
        "welcome": "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Cosmic Insight</b> - –≤–∞—à –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–∞–Ω—å–æ–Ω!\n\n–ü–æ–ª—É—á–∞–π—Ç–µ —Å–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ –Ω–µ–±–µ—Å–Ω—ã–µ –Ω–∞—Å—Ç–∞–≤–ª–µ–Ω–∏—è.",
        "error_general": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "horoscope_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "settings_title": "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>",
        "current_sign": "–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        "notifications_status": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:",
        "settings_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "premium_title": "‚ú® <b>–ü—Ä–µ–º–∏—É–º –§—É–Ω–∫—Ü–∏–∏</b> ‚ú®",
        "premium_description": "–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n- –û–ø—ã—Ç –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã\n- –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n–ë–æ–ª—å—à–µ —Ñ—É–Ω–∫—Ü–∏–π —Å–∫–æ—Ä–æ!",
        "premium_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "support_project": "üíé –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –Ω–∞—à –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏!",
        "enter_amount": "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ TON:",
        "invalid_amount": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–º—ã.",
        "send_ton": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>{amount} TON</b> –Ω–∞:\n<code>{wallet}</code>\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∞—à –∫–æ—à–µ–ª–µ–∫:",
        "donation_closed": "–î–æ–Ω–∞—Ç –∑–∞–∫—Ä—ã—Ç.",
        "main_menu_text": "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        "choose_sign": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:",
        "sign_selection_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
        "sign_updated": "–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ:",
        "notifications_toggled": "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: <b>{status}</b>",
        "back_to_main_menu": "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        "unhandled_text": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
        "entertainments_title": "üé≤ <b>–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è</b>",
        "entertainments_error": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "ask_question": "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –º–∞–≥–∏—á–µ—Å–∫–æ–º—É —à–∞—Ä—É:",
        "enter_birthdate": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01.2000):",
        "invalid_date_format": "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
        "invalid_date_value": "–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.",
        "birthdate_saved": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫:",
        "choose_language": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "language_set": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π.",
        "language_set_en": "Language set to English."
    },
    "en": {
        "welcome": "‚ú® Welcome to <b>Cosmic Insight</b> - your personal astrology companion!\n\nGet your daily horoscope and celestial guidance.",
        "error_general": "Sorry, an error occurred. Please try again later.",
        "horoscope_error": "Sorry, an error occurred while getting your horoscope. Please try again later.",
        "settings_title": "‚öôÔ∏è <b>Settings</b>",
        "current_sign": "Your current zodiac sign:",
        "notifications_status": "Daily notifications:",
        "settings_error": "Sorry, an error occurred while opening settings. Please try again later.",
        "premium_title": "‚ú® <b>Premium Features</b> ‚ú®",
        "premium_description": "Unlock exclusive benefits:\n- Ad-free experience\n- Advanced horoscopes\n- Priority support\n\nMore features coming soon!",
        "premium_error": "Sorry, an error occurred. Please try again later.",
        "support_project": "üíé Support our project and get bonus features!",
        "enter_amount": "Enter donation amount in TON:",
        "invalid_amount": "Please enter a valid positive number for the amount.",
        "send_ton": "Please send <b>{amount} TON</b> to:\n<code>{wallet}</code>\n\nOr click below to open your wallet:",
        "donation_closed": "Donation closed.",
        "main_menu_text": "Main menu:",
        "choose_sign": "Choose your zodiac sign:",
        "sign_selection_error": "Sorry, an error occurred.",
        "sign_updated": "Your zodiac sign has been updated to:",
        "notifications_toggled": "Daily notifications: <b>{status}</b>",
        "back_to_main_menu": "Returning to main menu.",
        "unhandled_text": "Sorry, I don't know how to process that text yet. Please use commands or menu buttons.",
        "entertainments_title": "üé≤ <b>Entertainments</b>",
        "entertainments_error": "Sorry, an error occurred while opening entertainments. Please try again later.",
        "ask_question": "Ask your question to the Magic 8-Ball:",
        "enter_birthdate": "Please enter your birth date in DD.MM.YYYY format (e.g., 01.01.2000):",
        "invalid_date_format": "Invalid date format. Please use DD.MM.YYYY.",
        "invalid_date_value": "Invalid date. Please ensure day, month, and year are correct.",
        "birthdate_saved": "Birth date saved. Your zodiac sign is determined as:",
        "choose_language": "Choose language:",
        "language_set": "Language set to English.",
        "language_set_ru": "–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –†—É—Å—Å–∫–∏–π."
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
const getText = (key, lang, replacements = {}) => {
    let text = TEXTS[lang]?.[key] || TEXTS['en'][key];
    for (const [placeholder, value] of Object.entries(replacements)) {
        text = text.replace(`{${placeholder}}`, value);
    }
    return text;
};

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegraf (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ astro.py) ---

bot.start(async (ctx) => {
    try {
        const user_id = ctx.from.id;
        const languageCode = ctx.from.language_code && ['ru', 'en'].includes(ctx.from.language_code) ? ctx.from.language_code : 'en';
        const user = await getUser(user_id, languageCode); // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —Å —è–∑—ã–∫–æ–º

        await ctx.replyWithHTML(
            getText('welcome', user.language),
            Keyboard.main_menu()
        );
        console.log(`User ${user_id} started the bot. Language: ${user.language}`);
    } catch (error) {
        console.error('Error in /start handler:', error);
        await ctx.reply(getText('error_general', 'en')); // –î–µ—Ñ–æ–ª—Ç –Ω–∞ EN –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üîÆ Get Horoscope"
bot.hears('üîÆ Get Horoscope', async (ctx) => {
    try {
        const user_id = ctx.from.id;
        const user = await getUser(user_id);

        const horoscope = HoroscopeGenerator.generate(user, user.language);

        const shareBtn = Keyboard.share_bot_keyboard(ctx.botInfo.username); // botInfo.username –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegraf
        const markup = Markup.inlineKeyboard([
            [Markup.button.callback(user.language === 'ru' ? "‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ü—Ä–æ–µ–∫—Ç" : "‚ù§Ô∏è Support Project", "show_donate")]
        ]).add(...shareBtn.reply_markup.inline_keyboard[0]); // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"

        await ctx.replyWithHTML(
            horoscope,
            markup
        );

        await showAds(user_id, user.language); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É

    } catch (error) {
        console.error('Error in Get Horoscope handler:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('horoscope_error', user.language));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è Settings"
bot.hears('‚öôÔ∏è Settings', async (ctx) => {
    try {
        const user_id = ctx.from.id;
        const user = await getUser(user_id);
        const currentSign = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];
        const notificationsEnabled = user.daily_notifications_enabled || false;
        const notificationsStatusText = notificationsEnabled ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");

        await ctx.replyWithHTML(
            `${getText('settings_title', user.language)}\n\n` +
            `${getText('current_sign', user.language)} <b>${currentSign}</b>\n` +
            `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
            Keyboard.settings_menu(user.language, notificationsEnabled)
        );
    } catch (error) {
        console.error('Error in Settings handler:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('settings_error', user.language));
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚ù§Ô∏è Support Project" (–∑–∞–º–µ–Ω–∏–ª–∏ Premium)
bot.hears('‚ù§Ô∏è Support Project', async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        await ctx.replyWithHTML(
            getText('support_project', user.language),
            Keyboard.donate_menu()
        );
    } catch (error) {
        console.error('Error in Support Project handler:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('premium_error', user.language)); // –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –≤ support_error
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "üé≤ Entertainments"
bot.hears('üé≤ Entertainments', async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        await ctx.replyWithHTML(
            getText('entertainments_title', user.language),
            Keyboard.entertainments_menu()
        );
    } catch (error) {
        console.error('Error in Entertainments handler:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('entertainments_error', user.language));
    }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback Query (Inline Keyboard Buttons) ---

// Donate menu actions
bot.action('show_donate', async (ctx) => {
    await ctx.answerCbQuery();
    try {
        const user = await getUser(ctx.from.id);
        await ctx.editMessageText(
            getText('support_project', user.language),
            Keyboard.donate_menu()
        );
    } catch (error) {
        console.error('Error in show_donate callback:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('error_general', user.language));
    }
});

bot.action(/^donate_/, async (ctx) => {
    await ctx.answerCbQuery();
    const amountType = ctx.match[0].split("_")[1]; // "5", "10", "custom"
    const user = await getUser(ctx.from.id);

    try {
        if (amountType === "custom") {
            await ctx.editMessageText(
                getText('enter_amount', user.language),
                Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º ReplyKeyboard, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ (—Ö–æ—Ç—è –∑–¥–µ—Å—å Inline)
            );
            await updateUser(ctx.from.id, { state: 'awaiting_donate_amount' }); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        } else {
            const amount = parseFloat(amountType);
            const tonLink = `https://t.me/send?start=transfer_ton_${TON_WALLET_ADDRESS}_${amount * 1_000_000_000}`; // –ü—Ä–∏–º–µ—Ä TON Space link
            // –ò–ª–∏ ton://transfer/YOUR_WALLET?amount=NANO_TON
            
            const builder = Markup.inlineKeyboard([
                [Markup.button.url(user.language === 'ru' ? "–û—Ç–∫—Ä—ã—Ç—å TON –ö–æ—à–µ–ª–µ–∫" : "Open TON Wallet", tonLink)],
                [Markup.button.callback(user.language === 'ru' ? "–ì–æ—Ç–æ–≤–æ" : "Done", "close_donate")]
            ]);
            
            await ctx.editMessageText(
                getText('send_ton', user.language, { amount: amount, wallet: TON_WALLET_ADDRESS }),
                { reply_markup: builder.reply_markup, parse_mode: 'HTML' }
            );
        }
    } catch (error) {
        console.error('Error in donate_ callback:', error);
        await ctx.reply(getText('error_general', user.language));
    }
});

bot.action('close_donate', async (ctx) => {
    await ctx.answerCbQuery(getText('donation_closed', (await getUser(ctx.from.id)).language));
    try {
        await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    } catch (e) {
        console.warn(`Failed to delete message after close_donate: ${e.message}`);
    }
    const user = await getUser(ctx.from.id);
    await ctx.reply(getText('main_menu_text', user.language), Keyboard.main_menu());
});

// Settings actions
bot.action('settings_select_sign', async (ctx) => {
    await ctx.answerCbQuery();
    try {
        const user = await getUser(ctx.from.id);
        await ctx.editMessageText(
            getText('choose_sign', user.language),
            Keyboard.zodiac_sign_selection()
        );
        await updateUser(ctx.from.id, { state: 'awaiting_sign_selection' }); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    } catch (error) {
        console.error('Error in settings_select_sign callback:', error);
        const user = await getUser(ctx.from.id);
        await ctx.reply(getText('sign_selection_error', user.language));
    }
});

bot.action(/^set_sign_/, async (ctx) => {
    await ctx.answerCbQuery();
    const selectedSign = ctx.match[0].split("_")[2];
    const userId = ctx.from.id;
    await updateUser(userId, { sign: selectedSign, state: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    const user = await getUser(userId);
    const currentSignName = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];
    const notificationsEnabled = user.daily_notifications_enabled || false;
    const notificationsStatusText = notificationsEnabled ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");

    await ctx.editMessageText(
        `${getText('settings_title', user.language)}\n\n` +
        `${getText('current_sign', user.language)} <b>${currentSignName}</b>\n` +
        `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
        { reply_markup: Keyboard.settings_menu(user.language, notificationsEnabled).reply_markup, parse_mode: 'HTML' }
    );
});

bot.action('settings_toggle_notifications', async (ctx) => {
    await ctx.answerCbQuery();
    const userId = ctx.from.id;
    const user = await getUser(userId);
    
    const newStatus = !user.daily_notifications_enabled;
    await updateUser(userId, { daily_notifications_enabled: newStatus });
    
    const notificationsStatusText = newStatus ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");
    const currentSignName = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];

    await ctx.editMessageText(
        `${getText('settings_title', user.language)}\n\n` +
        `${getText('current_sign', user.language)} <b>${currentSignName}</b>\n` +
        `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
        { reply_markup: Keyboard.settings_menu(user.language, newStatus).reply_markup, parse_mode: 'HTML' }
    );
});

bot.action('settings_language', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    await ctx.editMessageText(
        getText('choose_language', user.language),
        Keyboard.language_selection_menu()
    );
    await updateUser(ctx.from.id, { state: 'awaiting_language_selection' });
});

bot.action(/^set_language_/, async (ctx) => {
    await ctx.answerCbQuery();
    const selectedLang = ctx.match[0].split("_")[2];
    const userId = ctx.from.id;
    await updateUser(userId, { language: selectedLang, state: null });

    const user = await getUser(userId); // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const currentSignName = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];
    const notificationsEnabled = user.daily_notifications_enabled || false;
    const notificationsStatusText = notificationsEnabled ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");

    await ctx.editMessageText(
        `${getText('settings_title', user.language)}\n\n` +
        `${getText('current_sign', user.language)} <b>${currentSignName}</b>\n` +
        `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
        { reply_markup: Keyboard.settings_menu(user.language, notificationsEnabled).reply_markup, parse_mode: 'HTML' }
    );
    await ctx.reply(getText(`language_set_${selectedLang}`, selectedLang));
});

bot.action('back_to_settings_from_lang', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    const currentSignName = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];
    const notificationsEnabled = user.daily_notifications_enabled || false;
    const notificationsStatusText = notificationsEnabled ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");

    await ctx.editMessageText(
        `${getText('settings_title', user.language)}\n\n` +
        `${getText('current_sign', user.language)} <b>${currentSignName}</b>\n` +
        `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
        { reply_markup: Keyboard.settings_menu(user.language, notificationsEnabled).reply_markup, parse_mode: 'HTML' }
    );
    await updateUser(ctx.from.id, { state: null });
});

bot.action('back_to_settings_from_sign', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    const currentSignName = HoroscopeGenerator.SIGNS[user.sign][`name_${user.language}`];
    const notificationsEnabled = user.daily_notifications_enabled || false;
    const notificationsStatusText = notificationsEnabled ? (user.language === 'ru' ? "–í–ö–õ" : "ON") : (user.language === 'ru' ? "–í–´–ö–õ" : "OFF");

    await ctx.editMessageText(
        `${getText('settings_title', user.language)}\n\n` +
        `${getText('current_sign', user.language)} <b>${currentSignName}</b>\n` +
        `${getText('notifications_status', user.language)} <b>${notificationsStatusText}</b>`,
        { reply_markup: Keyboard.settings_menu(user.language, notificationsEnabled).reply_markup, parse_mode: 'HTML' }
    );
    await updateUser(ctx.from.id, { state: null });
});

// Entertainments actions
bot.action('entertainment_cookie', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    const cookieMessage = HoroscopeGenerator.getFortuneCookie(user.language);
    await ctx.replyWithHTML(
        cookieMessage,
        Keyboard.entertainments_menu() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
    );
});

bot.action('entertainment_8ball', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    await ctx.replyWithHTML(
        getText('ask_question', user.language),
        Markup.removeKeyboard() // –£–±–∏—Ä–∞–µ–º ReplyKeyboard –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    );
    await updateUser(ctx.from.id, { state: 'awaiting_8ball_question' });
});

bot.action('entertainment_compatibility', async (ctx) => {
    await ctx.answerCbQuery();
    const user = await getUser(ctx.from.id);
    await ctx.replyWithHTML(
        user.language === 'ru' ? "–î–ª—è —Ç–µ—Å—Ç–∞ –Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞, –∞ –∑–∞—Ç–µ–º –∑–Ω–∞–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞." : "For compatibility test, please choose your zodiac sign, then your partner's sign.",
        HoroscopeGenerator.SIGNS.map(sign => Markup.button.callback(sign.emoji + " " + (user.language === 'ru' ? sign.name_ru : sign.name_en), `compatibility_select_sign1_${sign.key}`))
    );
    await updateUser(ctx.from.id, { state: 'awaiting_compatibility_sign1' });
});


bot.action('back_to_main_menu_from_entertainments', async (ctx) => {
    await ctx.answerCbQuery();
    try {
        await ctx.deleteMessage(); // –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    } catch (e) {
        console.warn(`Failed to delete message after back_to_main_menu_from_entertainments: ${e.message}`);
    }
    const user = await getUser(ctx.from.id);
    await ctx.reply(getText('main_menu_text', user.language), Keyboard.main_menu());
    await updateUser(ctx.from.id, { state: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
});


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (FSM states) ---
bot.on('text', async (ctx, next) => {
    const userId = ctx.from.id;
    const user = await getUser(userId);
    const text = ctx.message.text;

    if (text.startsWith('/')) {
        return next(); // –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–ª—å—à–µ
    }

    switch (user.state) {
        case 'awaiting_donate_amount':
            try {
                const amount = parseFloat(text);
                if (isNaN(amount) || amount <= 0) {
                    throw new Error("Invalid amount");
                }
                const tonLink = `https://t.me/send?start=transfer_ton_${TON_WALLET_ADDRESS}_${amount * 1_000_000_000}`;
                
                const builder = Markup.inlineKeyboard([
                    [Markup.button.url(user.language === 'ru' ? "–û—Ç–∫—Ä—ã—Ç—å TON –ö–æ—à–µ–ª–µ–∫" : "Open TON Wallet", tonLink)],
                    [Markup.button.callback(user.language === 'ru' ? "–ì–æ—Ç–æ–≤–æ" : "Done", "close_donate")]
                ]);
                
                await ctx.replyWithHTML(
                    getText('send_ton', user.language, { amount: amount, wallet: TON_WALLET_ADDRESS }),
                    { reply_markup: builder.reply_markup }
                );
                await updateUser(userId, { state: null });
                await ctx.reply(getText('main_menu_text', user.language), Keyboard.main_menu()); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            } catch (error) {
                console.error('Error processing custom amount:', error);
                await ctx.reply(getText('invalid_amount', user.language));
                // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å
                await updateUser(userId, { state: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                await ctx.reply(getText('main_menu_text', user.language), Keyboard.main_menu());
            }
            break;

        case 'awaiting_8ball_question':
            const answer = HoroscopeGenerator.getMagic8BallAnswer(user.language);
            await ctx.replyWithHTML(
                answer,
                Keyboard.entertainments_menu() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
            );
            await updateUser(userId, { state: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            break;

        case 'awaiting_birthdate': // –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
            try {
                const parts = text.split('.');
                if (parts.length !== 3) {
                    throw new Error("Invalid format");
                }
                const day = parseInt(parts[0]);
                const month = parseInt(parts[1]);
                const year = parseInt(parts[2]);

                if (isNaN(day) || isNaN(month) || isNaN(year) || day < 1 || day > 31 || month < 1 || month > 12 || year < 1900 || year > DateTime.now().year) {
                    throw new Error("Invalid date values");
                }

                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
                const birthDate = DateTime.local(year, month, day);
                if (!birthDate.isValid) {
                    throw new Error("Invalid date values");
                }

                const zodiacSign = HoroscopeGenerator.getSignByBirthDate(birthDate.day, birthDate.month);
                await updateUser(userId, { birth_date: birthDate.toJSDate(), sign: zodiacSign, state: null });
                await ctx.replyWithHTML(
                    `${getText('birthdate_saved', user.language)} <b>${HoroscopeGenerator.SIGNS[zodiacSign][`name_${user.language}`]}</b>`,
                    Keyboard.settings_menu(user.language, user.daily_notifications_enabled) // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
                );
            } catch (error) {
                console.error('Error processing birthdate:', error);
                if (error.message === "Invalid format") {
                    await ctx.reply(getText('invalid_date_format', user.language));
                } else {
                    await ctx.reply(getText('invalid_date_value', user.language));
                }
                // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—Ä–æ–±–æ–≤–∞–ª —Å–Ω–æ–≤–∞
                await updateUser(userId, { state: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
                await ctx.reply(getText('main_menu_text', user.language), Keyboard.main_menu());
            }
            break;

        case 'awaiting_compatibility_sign1':
            // –≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
            // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç
            await ctx.reply(user.language === 'ru' ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫." : "Please select a zodiac sign using the buttons.");
            break;
        case 'awaiting_compatibility_sign2':
            // –≠—Ç–æ—Ç —Å—Ç–µ–π—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏
            await ctx.reply(user.language === 'ru' ? "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫." : "Please select your partner's zodiac sign using the buttons.");
            break;


        default:
            // –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Ç–æ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.
            await ctx.reply(getText('unhandled_text', user.language), Keyboard.main_menu());
            break;
    }
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª) ---
// –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞–∫–æ–≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
bot.action(/^compatibility_select_sign1_/, async (ctx) => {
    await ctx.answerCbQuery();
    const sign1 = ctx.match[0].split("_")[3];
    const user = await getUser(ctx.from.id);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π
    await updateUser(user._id, { state: 'awaiting_compatibility_sign2', compatibility_sign1: sign1 });

    await ctx.editMessageText(
        user.language === 'ru' ? "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤–∞—à–µ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:" : "Now choose your partner's zodiac sign:",
        HoroscopeGenerator.SIGNS.map(sign => Markup.button.callback(sign.emoji + " " + (user.language === 'ru' ? sign.name_ru : sign.name_en), `compatibility_select_sign2_${sign.key}`))
    );
});

bot.action(/^compatibility_select_sign2_/, async (ctx) => {
    await ctx.answerCbQuery();
    const sign2 = ctx.match[0].split("_")[3];
    const user = await getUser(ctx.from.id);

    const sign1 = user.compatibility_sign1; // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!sign1) {
        // –ï—Å–ª–∏ –ø–æ—á–µ–º—É-—Ç–æ –ø–µ—Ä–≤—ã–π –∑–Ω–∞–∫ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –ø—Ä–æ—Å–∏–º –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ
        await ctx.editMessageText(user.language === 'ru' ? "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." : "An error occurred, please try again.", Keyboard.entertainments_menu());
        await updateUser(user._id, { state: null, compatibility_sign1: null });
        return;
    }

    const compatibilityMessage = HoroscopeGenerator.getCompatibility(sign1, sign2, user.language);
    
    await ctx.editMessageText(
        compatibilityMessage,
        Keyboard.entertainments_menu() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π
    );
    await updateUser(user._id, { state: null, compatibility_sign1: null }); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
});


// --- API Route –¥–ª—è Vercel Webhook ---

export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º botInfo –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å username –¥–ª—è share_bot_keyboard
      if (!bot.botInfo) {
          await bot.telegram.getMe().then((me) => {
              bot.botInfo = me;
              console.log(`Bot username initialized: @${me.username}`);
          });
      }
      
      await bot.handleUpdate(req.body);
      res.status(200).send('OK');
    } catch (error) {
      console.error('Error handling Telegram update:', error);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  } else {
    res.status(405).json({ error: 'Method Not Allowed. Use POST.' });
  }
}
