// pages/api/webhook.js

import connectToDatabase from '../../lib/mongodb.js';
import { HoroscopeGenerator, Keyboard } from '../../lib/horoscope.js';
import { TelegramService } from '../../lib/telegram.js';

// FSM States (—Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∞)
const STATES = {
    DEFAULT: 'default',
    WAITING_FOR_SIGN: 'waiting_for_sign',
    WAITING_FOR_CUSTOM_DONATION: 'waiting_for_custom_donation'
};

export default async function handler(req, res) {
    if (req.method !== 'POST') {
        return res.status(405).send('Method Not Allowed');
    }

    const update = req.body;
    console.log("Received Telegram update:", JSON.stringify(update, null, 2)); // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback query
    const message = update.message;
    const callbackQuery = update.callback_query;

    if (!message && !callbackQuery) {
        return res.status(200).send('No message or callback query in update.');
    }

    let chatId;
    let text;
    let messageId;
    let fromId;
    let firstName;
    let isCallback = false;

    if (message) {
        chatId = message.chat.id;
        text = message.text;
        fromId = message.from.id;
        firstName = message.from.first_name || 'User';
    } else if (callbackQuery) {
        chatId = callbackQuery.message.chat.id;
        text = callbackQuery.data; // –î–ª—è callback query –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ 'data'
        messageId = callbackQuery.message.message_id;
        fromId = callbackQuery.from.id;
        firstName = callbackQuery.from.first_name || 'User';
        isCallback = true;
    }

    if (!chatId) {
        console.error("Chat ID not found in update:", update);
        return res.status(400).send('Chat ID not found.');
    }

    let dbResult;
    try {
        dbResult = await connectToDatabase();
        if (!dbResult || !dbResult.collection) {
            throw new Error("MongoDB connection did not return a valid collection.");
        }
    } catch (error) {
        console.error("Failed to connect to DB in webhook:", error);
        await TelegramService.sendMessage(chatId, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        return res.status(500).send('DB connection error');
    }

    const usersCollection = dbResult.collection;

    let user = await usersCollection.findOne({ telegram_id: fromId });

    if (!user) {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        user = {
            telegram_id: fromId,
            first_name: firstName,
            username: message?.from?.username || '',
            sign: null, // –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é null
            state: STATES.DEFAULT, // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            daily_notifications_enabled: false, // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω—ã
            lang: 'ru', // –Ø–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            created_at: new Date()
        };
        await usersCollection.insertOne(user);
        console.log(`New user created: ${fromId}`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    try {
        if (isCallback) {
            await TelegramService.answerCallbackQuery(callbackQuery.id); // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callbackQuery
            await handleCallbackQuery(user, usersCollection, chatId, messageId, text);
        } else {
            await handleMessage(user, usersCollection, chatId, text);
        }
        res.status(200).send('OK'); // –í–∞–∂–Ω–æ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å 200 OK
    } catch (error) {
        console.error("Error processing message/callback:", error);
        await TelegramService.sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        res.status(500).send('Internal Server Error');
    }
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–ª–±—ç–∫–æ–≤ ---

async function handleMessage(user, usersCollection, chatId, text) {
    let replyText = "";
    let replyMarkup = null;

    if (user.state === STATES.WAITING_FOR_CUSTOM_DONATION) {
        const amount = parseFloat(text);
        if (!isNaN(amount) && amount > 0) {
            replyText = `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å! –î–ª—è –¥–æ–Ω–∞—Ç–∞ ${amount} TON –Ω–∞ –∞–¥—Ä–µ—Å ${process.env.TON_WALLET_ADDRESS}.`;
            user.state = STATES.DEFAULT; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await usersCollection.updateOne({ telegram_id: user.telegram_id }, { $set: { state: user.state } });
            replyMarkup = Keyboard.mainMenu().reply_markup;
        } else {
            replyText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞ (—á–∏—Å–ª–æ).";
        }
        await TelegramService.sendMessage(chatId, replyText, replyMarkup);
        return;
    }

    switch (text) {
        case "/start":
            replyText = `–ü—Ä–∏–≤–µ—Ç, ${user.first_name}! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥. –í—ã–±–µ—Ä–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ—Å–∫–æ–ø.`;
            replyMarkup = Keyboard.mainMenu().reply_markup;
            await TelegramService.sendMessage(chatId, replyText, replyMarkup);
            break;
        case "üåü Get Horoscope":
            if (user.sign) {
                const horoscopeText = HoroscopeGenerator.generate(user);
                await TelegramService.sendMessage(chatId, horoscopeText);
            } else {
                replyText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (‚öôÔ∏è Settings).";
                await TelegramService.sendMessage(chatId, replyText);
                // –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –∑–Ω–∞–∫
                await TelegramService.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:", Keyboard.zodiacSignSelection());
            }
            break;
        case "üíé Premium":
            replyText = "–ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç, —Å–¥–µ–ª–∞–≤ –¥–æ–Ω–∞—Ç –≤ TON! –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é:";
            await TelegramService.sendMessage(chatId, replyText, Keyboard.donateMenu());
            break;
        case "‚öôÔ∏è Settings":
            replyText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:";
            await TelegramService.sendMessage(chatId, replyText, Keyboard.settingsMenu(user));
            break;
        default:
            replyText = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.";
            replyMarkup = Keyboard.mainMenu().reply_markup;
            await TelegramService.sendMessage(chatId, replyText, replyMarkup);
            break;
    }
}

async function handleCallbackQuery(user, usersCollection, chatId, messageId, data) {
    let replyText = "";
    let replyMarkup = null;
    let needsEdit = false;

    if (data.startsWith('set_sign_')) {
        const newSign = data.replace('set_sign_', '');
        user.sign = newSign;
        await usersCollection.updateOne({ telegram_id: user.telegram_id }, { $set: { sign: newSign } });
        replyText = `–í–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ <b>${newSign.charAt(0).toUpperCase() + newSign.slice(1)}</b>.`;
        needsEdit = true;
        replyMarkup = Keyboard.settingsMenu(user); // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã –∑–Ω–∞–∫–∞
    } else if (data === 'settings_notifications') {
        user.daily_notifications_enabled = !user.daily_notifications_enabled;
        await usersCollection.updateOne(
            { telegram_id: user.telegram_id },
            { $set: { daily_notifications_enabled: user.daily_notifications_enabled } }
        );
        replyText = user.daily_notifications_enabled ? "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîî –≤–∫–ª—é—á–µ–Ω—ã." : "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üîï –æ—Ç–∫–ª—é—á–µ–Ω—ã.";
        needsEdit = true;
        replyMarkup = Keyboard.settingsMenu(user);
    } else if (data === 'settings_select_sign') {
        replyText = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:";
        needsEdit = true;
        replyMarkup = Keyboard.zodiacSignSelection();
    } else if (data.startsWith('donate_')) {
        if (data === 'donate_custom') {
            user.state = STATES.WAITING_FOR_CUSTOM_DONATION;
            await usersCollection.updateOne({ telegram_id: user.telegram_id }, { $set: { state: user.state } });
            replyText = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ TON –¥–ª—è –¥–æ–Ω–∞—Ç–∞:";
            needsEdit = true;
            // –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥
            replyMarkup = { inline_keyboard: [] }; 
        } else {
            const amount = data.replace('donate_', '');
            replyText = `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —â–µ–¥—Ä–æ—Å—Ç—å! –î–ª—è –¥–æ–Ω–∞—Ç–∞ ${amount} TON –Ω–∞ –∞–¥—Ä–µ—Å ${process.env.TON_WALLET_ADDRESS}.`;
            needsEdit = true;
            replyMarkup = Keyboard.donateMenu(); // –ú–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é –¥–æ–Ω–∞—Ç–∞ –∏–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        }
    } else if (data === 'back_to_main_menu') {
        replyText = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!";
        needsEdit = true;
        // –î–ª—è ReplyKeyboard —ç—Ç–æ –æ–±—ã—á–Ω–æ sendMessage, –Ω–æ –¥–ª—è InlineKeyboard –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        // –ï—Å–ª–∏ —ç—Ç–æ InlineKeyboard, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ
        replyMarkup = Keyboard.mainMenu().reply_markup;
        // –ï—Å–ª–∏ –º—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –æ—Ç Inline –∫ Reply, —Ç–æ –ª—É—á—à–µ sendMessage
        await TelegramService.sendMessage(chatId, replyText, replyMarkup);
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å editMessage
    } else if (data === 'back_to_settings_menu') {
        replyText = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:";
        needsEdit = true;
        replyMarkup = Keyboard.settingsMenu(user);
    }

    if (needsEdit) {
        await TelegramService.editMessage(chatId, messageId, replyText, replyMarkup);
    } else {
        await TelegramService.sendMessage(chatId, replyText, replyMarkup);
    }
}
