// pages/api/webhook.js
import { connectToDatabase } from '../../lib/mongodb';
import { HoroscopeGenerator, Keyboard } from '../../lib/horoscope';
import { sendMessage, answerCallbackQuery, editMessageText, editMessageReplyMarkup, deleteMessage, showAds } from '../../lib/telegram';

// FSM States
const FSM_STATES = {
    NONE: 'none',
    DONATE_AMOUNT: 'donate_amount',
    SELECT_SIGN: 'select_sign'
};

// Helper functions for user management (getUser, updateUser)
async function getUser(userId) {
    const { db } = await connectToDatabase();
    const usersCollection = db.collection(process.env.MONGO_COLLECTION_NAME || "users");
    let user = await usersCollection.findOne({ _id: userId });
    if (!user) {
        user = { _id: userId, sign: "aries", last_horoscope_date: null, daily_notifications_enabled: true, fsm_state: null };
        await usersCollection.insertOne(user);
    }
    return user;
}

async function updateUser(userId, data) {
    const { db } = await connectToDatabase();
    const usersCollection = db.collection(process.env.MONGO_COLLECTION_NAME || "users");
    await usersCollection.updateOne({ _id: userId }, { $set: data });
}

export default async function handler(req, res) {
    let chatId = null; // Defined here for access in catch block

    if (req.method !== 'POST') {
        return res.status(405).json({ error: 'Method Not Allowed' });
    }

    if (!req.body) {
        console.error("–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞.");
        return res.status(400).json({ error: 'Missing request body' });
    }

    try {
        const update = req.body;

        if (update.message) {
            const message = update.message;
            chatId = message.chat.id;
            const text = message.text || '';
            const userId = message.from.id;

            const user = await getUser(userId);
            const currentState = user.fsm_state || FSM_STATES.NONE;

            // ... (–≤—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ FSM –∏–∑ api/index.js)
            // –ü—Ä–∏–º–µ—Ä:
            if (currentState === FSM_STATES.DONATE_AMOUNT) {
                // ... (–ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–∞)
            } else if (text === '/start') {
                await sendMessage(chatId, "‚ú® Welcome to <b>Cosmic Insight</b>...", { reply_markup: Keyboard.mainMenu().reply_markup });
            } else if (text === "üåü Get Horoscope") {
                const horoscope = HoroscopeGenerator.generate(user);
                const donateBtnBuilder = Keyboard.inlineKeyboardBuilder();
                donateBtnBuilder.push({ text: "‚ù§Ô∏è Support Us", callback_data: "show_donate" });
                await sendMessage(chatId, horoscope, { reply_markup: donateBtnBuilder.inline_keyboard });
                await showAds(userId);
            }
            // ... (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)

        } else if (update.callback_query) {
            const callbackQuery = update.callback_query;
            chatId = callbackQuery.message.chat.id;
            const messageId = callbackQuery.message.message_id;
            const userId = callbackQuery.from.id;
            const data = callbackQuery.data;

            await answerCallbackQuery(callbackQuery.id);

            // ... (–≤—Å—è –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback_query –∏–∑ api/index.js)
            // –ü—Ä–∏–º–µ—Ä:
            if (data === "show_donate") {
                await editMessageText(chatId, messageId, "üíé Support our project...", { reply_markup: Keyboard.donateMenu().inline_keyboard });
            }
            // ... (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –¥–ª—è –≤—Å–µ—Ö callback_query)
        } else {
            console.log("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞.");
        }

        return res.status(200).json({ status: 'ok' });

    } catch (error) {
        console.error(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Next.js API: ${error.message}`);
        if (chatId) {
            await sendMessage(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
        return res.status(500).json({ error: error.message });
    }
}
